<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<style>
table, th, td {
  border: 1px solid black;
  border-collapse: collapse;
}
th, td {
  padding: 5px;
}
th {
  text-align: left;
  background: gray;
  color:white;
}
</style>
</head>

<body>
  <div>
    <input type="text" id="myinput" placeholder="Search..." title="Type in something">

    <p>Click on the header of a column to sort the table:</p>

    <table>
      <thead><tr>
        <th><span id="rid" class="w3-button table-column">rid<i class="caret"></i></span></th>
        <th><span id="datetime" class="w3-button table-column">datetime<i class="caret"></i></span></th>
        <th><span id="line" class="w3-button table-column">line<i class="caret"></i></span></th>
        <th><span id="unitid" class="w3-button table-column">unitid <i class="caret"></i></span></th>
        <th><span id="description" class="w3-button table-column">description <i class="caret"></i></span></th>
        <th><span id="partnumber" class="w3-button table-column">partnumber <i class="caret"></i></span></th>
        <th><span id="qty" class="w3-button table-column">qty <i class="caret"></i></span></th>
        <th><span id="duedate" class="w3-button table-column">duedate <i class="caret"></i></span></th>
        <th><span id="buyer" class="w3-button table-column">buyer <i class="caret"></i></span></th>
        <th><span id="arriveddate" class="w3-button table-column">arriveddate <i class="caret"></i></span></th>
      </tr></thead>
      <tbody id="mytable"></tbody>
    </table>
  </div>

<script>
var table = document.getElementById('mytable');
var input = document.getElementById('myinput');
var tableData = [];
ajax();

var caretUpClassName = 'fa fa-caret-up';
var caretDownClassName = 'fa fa-caret-down';

const sort_by = (field, reverse, primer) => {

  const key = primer ?
    function(x) {
      return primer(x[field]);
    } :
    function(x) {
      return x[field];
    };

  reverse = !reverse ? 1 : -1;

  return function(a, b) {
    return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
  };
};


function clearArrow() {
  let carets = document.getElementsByClassName('caret');
  for (let caret of carets) {
    caret.className = "caret";
  }
}


function toggleArrow(event) {
  let element = event.target;
  let caret, field, reverse;
  if (element.tagName === 'SPAN') {
    caret = element.getElementsByClassName('caret')[0];
    field = element.id
  }
  else {
    caret = element;
    field = element.parentElement.id
  }

  let iconClassName = caret.className;
  clearArrow();
  if (iconClassName.includes(caretUpClassName)) {
    caret.className = `caret ${caretDownClassName}`;
    reverse = false;
  } else {
    reverse = true;
    caret.className = `caret ${caretUpClassName}`;
  }

  tableData.sort(sort_by(field, reverse));
  populateTable();
}

function ajax(){
  var xhttp = new XMLHttpRequest();
  xhttp.open("GET", "/mat/buyers/apidb", true);
  xhttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
  xhttp.onreadystatechange = function() {
   if (this.readyState == 4 && this.status == 200) {
      // Response
      var response = JSON.parse(this.responseText);
        //console.log(response[0]);
	tableData = response[0];
	console.log(tableData);
        populateTable();
   }
  };
  xhttp.send();
}

function populateTable() {
  table.innerHTML = '';
  for (let data of tableData) {
    let row = table.insertRow(-1);

    let rid = row.insertCell(0);
    rid.innerHTML = data.rid;

    let datetime = row.insertCell(1);
    datetime.innerHTML = data.DateTime;

    let line = row.insertCell(2);
    line.innerHTML = data.Line;

    let unitid = row.insertCell(3);
    unitid.innerHTML = data.UnitID;

    let description = row.insertCell(4);
    description.innerHTML = data.Description;

    let partnumber = row.insertCell(5);
    partnumber.innerHTML = data.PartNumber;

    let qty = row.insertCell(6);
    qty.innerHTML = data.Qty;

    let duedate = row.insertCell(7);
    duedate.innerHTML = data.DueDate;

    let buyer = row.insertCell(8);
    buyer.innerHTML = data.Buyer;

    let arriveddate = row.insertCell(9);
    arriveddate.innerHTML = data.ArrivedDate;

  }

  filterTable();
}


function filterTable() {
  let filter = input.value.toUpperCase();
  rows = table.getElementsByTagName("TR");
  let flag = false;

  for (let row of rows) {
    let cells = row.getElementsByTagName("TD");
    for (let cell of cells) {
      if (cell.textContent.toUpperCase().indexOf(filter) > -1) {
        if (filter) {
          cell.style.backgroundColor = 'yellow';
        } else {
          cell.style.backgroundColor = '';
        }

        flag = true;
      } else {
        cell.style.backgroundColor = '';
      }
    }

    if (flag) {
      row.style.display = "";
    } else {
      row.style.display = "none";
    }

    flag = false;
  }
}

populateTable();

let tableColumns = document.getElementsByClassName('table-column');

for (let column of tableColumns) {
  column.addEventListener('click', function(event) {
    toggleArrow(event);
  });
}

input.addEventListener('keyup', function(event) {
  filterTable();
});
</script>
</body>
</html>
